"use strict";(self.webpackChunklaravel_time_series_docs=self.webpackChunklaravel_time_series_docs||[]).push([[371],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(p,".").concat(m)]||u[m]||s[m]||a;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3044:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],l={},p="Implement a projection",c={unversionedId:"getting-started/implement-a-projection",id:"getting-started/implement-a-projection",title:"Implement a projection",description:"Create a projection",source:"@site/docs/getting-started/implement-a-projection.md",sourceDirName:"getting-started",slug:"/getting-started/implement-a-projection",permalink:"/laravel-time-series-docs/getting-started/implement-a-projection",editUrl:"https://github.com/timothepearce/laravel-time-series-docs/docs/getting-started/implement-a-projection.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Make a model projectable",permalink:"/laravel-time-series-docs/getting-started/make-a-model-projectable"},next:{title:"Available periods",permalink:"/laravel-time-series-docs/getting-started/available-periods"}},d=[{value:"Create a projection",id:"create-a-projection",children:[],level:2},{value:"Define your projection periods",id:"define-your-projection-periods",children:[],level:2},{value:"Define the default content of your projection",id:"define-the-default-content-of-your-projection",children:[],level:2},{value:"Implement the binding",id:"implement-the-binding",children:[{value:"The model hook method",id:"the-model-hook-method",children:[],level:3},{value:"The projectable hook method",id:"the-projectable-hook-method",children:[],level:3}],level:2},{value:"Add a key to your projection",id:"add-a-key-to-your-projection",children:[],level:2}],s={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"implement-a-projection"},"Implement a projection"),(0,a.kt)("h2",{id:"create-a-projection"},"Create a projection"),(0,a.kt)("p",null,"To create a projection, executes the following command by replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"MyProjection")," with the name you chose:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:projection MyProjection\n")),(0,a.kt)("p",null,"Your newly created Projection will be accessible in the ",(0,a.kt)("inlineCode",{parentName:"p"},"app/models/projections")," folder."),(0,a.kt)("p",null,"It is defined as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app/Models/Projections/MyProjection.php"',title:'"app/Models/Projections/MyProjection.php"'},'<?php\n\nnamespace App\\Models\\Projections;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse TimothePearce\\TimeSeries\\Contracts\\ProjectionContract;\nuse TimothePearce\\TimeSeries\\Models\\Projection;\n\nclass MyProjection extends Projection implements ProjectionContract\n{\n    /**\n     * The projected periods.\n     */\n    public array $periods = [];\n\n    /**\n     * The projection default content.\n     */\n    public function defaultContent(): array\n    {\n        return [];\n    }\n\n    /**\n     * The "created" hook for projectable models.\n     */\n    public function projectableCreated(array $content, Model $model): array\n    {\n        return [];\n    }\n}\n')),(0,a.kt)("h2",{id:"define-your-projection-periods"},"Define your projection periods"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"periods")," attribute let you define the life period of each projection. Let's walk through this with an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app/Models/Projections/MyProjection.php" {8}',title:'"app/Models/Projections/MyProjection.php"',"{8}":!0},"...\n\nclass MyProjection extends Projection implements ProjectionContract\n{\n    /**\n     * The projected periods.\n     */\n    public array $periods = ['1 day'];\n\n    ...\n}\n")),(0,a.kt)("p",null,"By defining your projection's periods like that, each time a bound model is created/updated or whatever lifecycle event you listened to, a ",(0,a.kt)("inlineCode",{parentName:"p"},"MyProjection")," model with a creation date between now and yesterday at the same time will be queried. If this projection exists it will be updated, if not, it will be created."),(0,a.kt)("p",null,"You can define as many periods as you like, the available one are listed in the ",(0,a.kt)("a",{parentName:"p",href:"/getting-started/available-periods"},"Available periods")," section."),(0,a.kt)("h2",{id:"define-the-default-content-of-your-projection"},"Define the default content of your projection"),(0,a.kt)("p",null,"The default content is defined through the method of the same name which must return an array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app/Models/Projections/MyProjection.php" {10,11,12,13,14,15}',title:'"app/Models/Projections/MyProjection.php"',"{10,11,12,13,14,15}":!0},"...\n\nclass MyProjection extends Projection implements ProjectionContract\n{\n    ...\n\n    /**\n     * The projection default content.\n     */\n    public function defaultContent(): array\n    {\n        return [\n            'update_count' => 0,\n            'my_projection_metric' => 0,\n        ];\n    }\n\n    ...\n}\n")),(0,a.kt)("p",null,"Note that you can also return an array with a dynamic structure if necessary."),(0,a.kt)("h2",{id:"implement-the-binding"},"Implement the binding"),(0,a.kt)("p",null,"You can implement this logic in the two different ways listed below."),(0,a.kt)("h3",{id:"the-model-hook-method"},"The model hook method"),(0,a.kt)("p",null,"To bind a model to a projection, you must define a method composed of your model name (camel cased) followed by the event name you want to listen to."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app/Models/Projections/MyProjection.php" {12,13,14,15,16,17}',title:'"app/Models/Projections/MyProjection.php"',"{12,13,14,15,16,17}":!0},"...\n\nuse App\\Models\\MyModel;\n\nclass MyProjection extends Projection implements ProjectionContract\n{\n    ...\n\n    /**\n     * The MyModel \"updated\" hook.\n     */\n    public function myModelUpdated(array $content, MyModel $model): array\n    {\n        return [\n            'update_count' => $content['update_count'] + 1,\n        ];\n    }\n\n    ...\n}\n")),(0,a.kt)("p",null,"Note that you don't need to return an array with the exact same structure as the default content. The result of your hook method will be merged to the actual projection content (or the default one in case it is created)."),(0,a.kt)("h3",{id:"the-projectable-hook-method"},"The projectable hook method"),(0,a.kt)("p",null,"You have probably noticed the ",(0,a.kt)("inlineCode",{parentName:"p"},"projectableCreated")," method when you generate a new projection. Event-specific variations can also be used. eg: ",(0,a.kt)("inlineCode",{parentName:"p"},"projectableUpdated"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"projectableDeleted"),", etc."),(0,a.kt)("p",null,"This method should be helpful if you treat all bound models in the same way, for example, when your projection does not use specific data from each model."),(0,a.kt)("p",null,"It can also be considered a fallback for models without a specific implementation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app/Models/Projections/MyProjection.php" {12,13,14,15,16,17}',title:'"app/Models/Projections/MyProjection.php"',"{12,13,14,15,16,17}":!0},"...\n\nuse App\\Models\\MyModel;\n\nclass MyProjection extends Projection implements ProjectionContract\n{\n    ...\n\n    /**\n     * The \"updated\" hook for all bound models.\n     */\n    public function projectableUpdated(array $content, Model $model): array\n    {\n        return [\n            'update_count' => $content['update_count'] + 1,\n        ];\n    }\n\n    ...\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/getting-started/available-events"},"Available events")," section list all the event you can use."),(0,a.kt)("h2",{id:"add-a-key-to-your-projection"},"Add a key to your projection"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In case you bound multiple models to your projection you must use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Illuminate\\Database\\Eloquent\\Model")," type as first parameter of the ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," method."))),(0,a.kt)("p",null,"Sometimes you need to restrict your projection to a unique identifier (e.g: You want a projection scoped ",(0,a.kt)("strong",{parentName:"p"},"by Team ID"),")."),(0,a.kt)("p",null,"In that case, Time Series lets you define a ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," method in your projection:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app/Models/Projections/MyProjection.php" {10,11,12,13}',title:'"app/Models/Projections/MyProjection.php"',"{10,11,12,13}":!0},"...\n\nclass MyProjection extends Projection implements ProjectionContract\n{\n    ...\n\n    /**\n     * The projection key.\n     */\n    public function key(MyModel $model): string\n    {\n        return $myModel->team->id;\n    }\n}\n")),(0,a.kt)("p",null,"Now, each time a ",(0,a.kt)("inlineCode",{parentName:"p"},"MyProjection")," is queried, created or updated, a ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE key = ?")," clause will be added to the query.  "),(0,a.kt)("p",null,"To understand how to query a projection with a key, look at the ",(0,a.kt)("a",{parentName:"p",href:"/getting-started/query-your-projections"},"Query your projections")," section."))}u.isMDXComponent=!0}}]);